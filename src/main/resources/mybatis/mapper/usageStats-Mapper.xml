<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.admin.las.service.impl.UsageStatsMapper">
	<select id="dailyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">

	    <![CDATA[
	   	WITH date_list AS (
	         SELECT TRUNC(SYSDATE) - (LEVEL - 1) AS login_date
             FROM dual
             CONNECT BY LEVEL <= 7
	    ),
	    daily_login_counts AS (
	        SELECT
	            TO_CHAR(LL_CREATED_AT, 'YYYY-MM-DD') AS login_date,
	            COUNT(DISTINCT MEM_ID) AS user_count
	        FROM LOGIN_LOG
	        WHERE LL_STATUS = 'I'
              AND LL_CREATED_AT >= TRUNC(SYSDATE) - 6
              AND LL_CREATED_AT < TRUNC(SYSDATE) + 1 
	        GROUP BY TO_CHAR(LL_CREATED_AT, 'YYYY-MM-DD')
	    )
	    SELECT
	        TO_CHAR(d.login_date, 'YYYY-MM-DD') AS login_date,
	        NVL(l.user_count, 0) AS user_count
	    FROM date_list d
	    LEFT JOIN daily_login_counts l
	      ON TO_CHAR(d.login_date, 'YYYY-MM-DD') = l.login_date
	    ORDER BY d.login_date
	    ]]>
	</select>

	<select id="monthlyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    <![CDATA[
	    WITH month_list AS (
	        -- 현재 연도 1월부터 현재 월까지의 목록을 생성
	        SELECT ADD_MONTHS(TRUNC(SYSDATE, 'YY'), LEVEL - 1) AS login_month_date
	        FROM dual
	        CONNECT BY LEVEL <= MONTHS_BETWEEN(TRUNC(SYSDATE, 'MM'), TRUNC(SYSDATE, 'YY')) + 1
	    ),
	    monthly_login_counts AS (
	        -- 현재 연도의 월별 고유 사용자 수 집계 (가장 최근 기록과 무관하게)
	        SELECT TO_CHAR(LL_CREATED_AT, 'YYYY-MM') AS login_month,
	               COUNT(DISTINCT MEM_ID) AS user_count
	        FROM LOGIN_LOG
	        WHERE LL_STATUS = 'I'
	          AND LL_CREATED_AT >= TRUNC(SYSDATE, 'YY')
	          AND LL_CREATED_AT < ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12)
	        GROUP BY TO_CHAR(LL_CREATED_AT, 'YYYY-MM')
	    )
	    SELECT
	        TO_CHAR(d.login_month_date, 'YYYY-MM') AS login_month,
	        NVL(l.user_count, 0) AS user_count
	    FROM month_list d
	    LEFT JOIN monthly_login_counts l
	      ON TO_CHAR(d.login_month_date, 'YYYY-MM') = l.login_month
	    ORDER BY d.login_month_date
	    ]]>
	</select>

	<select id="liveUserList" parameterType="map" resultType="map">
		SELECT
		*
		FROM (
		SELECT
		ROW_NUMBER() OVER (ORDER BY A.MEM_ID DESC) AS RNUM,
		A.MEM_ID,
		A.MEM_NAME,
		A.LOGIN_TYPE,
		A.MEM_STUDENT,
		A.MEM_GEN,
		CASE WHEN
		A.LOGIN_TYPE = 'G33001' THEN '일반'
		WHEN A.LOGIN_TYPE = 'G33002' THEN
		'네이버'
		WHEN A.LOGIN_TYPE = 'G33003' THEN '카카오'
		ELSE '그 외 로그인'
		END AS
		LOGIN_TYPE_NAME,
		CASE WHEN A.MEM_STUDENT = 'N' THEN '대학생'
		WHEN
		A.MEM_STUDENT = 'Y' THEN '청소년'
		ELSE '일반인'
		END AS MEM_STUDENT_NAME,
		CASE
		WHEN TO_CHAR(A.MEM_GEN) = 'G11001' THEN '남'
		WHEN TO_CHAR(A.MEM_GEN) =
		'G11002' THEN '여'
		ELSE '그 외 성별'
		END AS MEM_GEN_NAME
		FROM
		MEMBER A
		INNER
		JOIN (
		SELECT
		MEM_ID
		FROM
		LOGIN_LOG
		GROUP BY
		MEM_ID
		HAVING
		COUNT(CASE WHEN
		LL_STATUS = 'I' THEN 1 END) > COUNT(CASE WHEN LL_STATUS = 'O'
		THEN 1
		END)
		) B ON A.MEM_ID = B.MEM_ID
		<where>
			<if test="gen != null and gen != ''">
				AND A.MEM_GEN = #{gen}
			</if>
			<if test="loginType != null and loginType != ''">
				AND A.LOGIN_TYPE = #{loginType}
			</if>
			<if test="keyword != null and keyword != ''">
				AND (
				A.MEM_NAME LIKE '%' || #{keyword} || '%'
				OR A.MEM_ID
				LIKE '%' || #{keyword} || '%'
				)
			</if>
		</where>
		ORDER BY A.MEM_ID DESC
		)
		WHERE RNUM BETWEEN #{startNo} AND #{endNo}
	</select>
	<select id="liveUserListCount" parameterType="map"
		resultType="int">
		SELECT
		COUNT(*)
		FROM
		MEMBER A
		INNER JOIN (
		SELECT
		MEM_ID
		FROM
		LOGIN_LOG
		GROUP
		BY
		MEM_ID
		HAVING
		COUNT(CASE WHEN LL_STATUS = 'I' THEN 1 END) > COUNT(CASE
		WHEN LL_STATUS = 'O'
		THEN 1 END)
		) B ON A.MEM_ID = B.MEM_ID
		<where>
			<if test="gen != null and gen != ''">
				AND A.MEM_GEN = #{gen}
			</if>
			<if test="loginType != null and loginType != ''">
				AND A.LOGIN_TYPE = #{loginType}
			</if>
			<if test="keyword != null and keyword != ''">
				AND (
				A.MEM_NAME LIKE '%' || #{keyword} || '%'
				OR A.MEM_ID
				LIKE '%' || #{keyword} || '%'
				)
			</if>
		</where>
	</select>

	<select id="pageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
		<![CDATA[
		SELECT *
		FROM (
		    SELECT PL_TITLE, COUNT(*) AS COUNT
		    FROM PAGE_LOG
		    WHERE TRUNC(PL_CREATED_AT) = TRUNC(SYSDATE)
		    GROUP BY PL_TITLE
		    ORDER BY COUNT(*) DESC
		)
		WHERE ROWNUM <= 10
		]]>
	</select>
	
	
	<select id="monthPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
		<![CDATA[
		SELECT *
		FROM (
		    SELECT PL_TITLE, COUNT(*) AS COUNT
		    FROM PAGE_LOG
		    WHERE PL_CREATED_AT >= TRUNC(SYSDATE, 'MM')  
		      AND PL_CREATED_AT < ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1)  
		    GROUP BY PL_TITLE
		    ORDER BY COUNT DESC
		)
		WHERE ROWNUM <= 10
		]]>
	</select>
	
	
	<select id="customUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
		<![CDATA[
		WITH date_list AS (
		    SELECT TRUNC(TO_DATE(#{startDate}, 'YYYY-MM-DD')) + LEVEL - 1 AS login_date
		    FROM dual
		    CONNECT BY LEVEL <= TRUNC(TO_DATE(#{endDate}, 'YYYY-MM-DD')) - TRUNC(TO_DATE(#{startDate}, 'YYYY-MM-DD')) + 1
		),
		daily_login_counts AS (
		    SELECT
		        TO_CHAR(LL_CREATED_AT, 'YYYY-MM-DD') AS login_date,
		        COUNT(DISTINCT MEM_ID) AS user_count
		    FROM LOGIN_LOG
		    WHERE LL_STATUS = 'I'
		      AND LL_CREATED_AT >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		      AND LL_CREATED_AT < TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1
		    GROUP BY TO_CHAR(LL_CREATED_AT, 'YYYY-MM-DD')
		)
		SELECT
		    TO_CHAR(d.login_date, 'YYYY-MM-DD') AS login_date,
		    NVL(l.user_count, 0) AS user_count
		FROM date_list d
		LEFT JOIN daily_login_counts l
		  ON TO_CHAR(d.login_date, 'YYYY-MM-DD') = l.login_date
		ORDER BY d.login_date

		]]>
	</select>
	
		<select id="getPageCalendar" resultType="kr.or.ddit.admin.las.service.VisitVO">
		<![CDATA[
			SELECT *
			FROM (
			    SELECT PL_TITLE, COUNT(*) AS COUNT
			    FROM PAGE_LOG
			    WHERE PL_CREATED_AT >= #{startDate}
			      AND PL_CREATED_AT < #{endDate}
			    GROUP BY PL_TITLE
			    ORDER BY COUNT DESC
			)
			WHERE ROWNUM <= 10

		]]>
	</select>
	
	<!-- 1. 일일 사용자 현황 (오늘 로그인한 고유 사용자 수) -->
	<select id="getDailyActiveUsers" resultType="int">
	    SELECT COUNT(DISTINCT MEM_ID)
	    FROM LOGIN_LOG
	    WHERE TRUNC(LL_CREATED_AT) = TRUNC(SYSDATE)
	    AND LL_STATUS = 'I'
	</select>
	
	<!-- 2. 일일 평균 홈페이지 이용 현황 (분 단위) -->
	<select id="getDailyAverageUsageTime" resultType="double">
	    WITH SESSION_TIMES AS (
	        SELECT 
	            MEM_ID,
	            LL_CREATED_AT AS LOGIN_TIME,
	            LEAD(LL_CREATED_AT) OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT) AS LOGOUT_TIME,
	            LL_STATUS,
	            LEAD(LL_STATUS) OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT) AS NEXT_STATUS
	        FROM LOGIN_LOG
	        WHERE TRUNC(LL_CREATED_AT) = TRUNC(SYSDATE)
	    )
	    SELECT NVL(AVG((LOGOUT_TIME - LOGIN_TIME) * 24 * 60), 0) AS avg_minutes
	    FROM SESSION_TIMES
	    WHERE LL_STATUS = 'I' 
	    AND NEXT_STATUS = 'O'
	    AND LOGOUT_TIME IS NOT NULL
	</select>
	
	<!-- 3. 현재 온라인 사용자 수 -->
	<select id="getCurrentOnlineUsers" resultType="int">
	    WITH LAST_LOG AS (
	        SELECT 
	            MEM_ID,
	            LL_STATUS,
	            ROW_NUMBER() OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT DESC) AS rn
	        FROM LOGIN_LOG
	    )
	    SELECT COUNT(*)
	    FROM LAST_LOG
	    WHERE rn = 1 
	    AND LL_STATUS = 'I'
	</select>
	
	<!-- 4. 활동 상태가 포함된 전체 회원 리스트 -->
	<select id="getMemberActivityList" resultType="kr.or.ddit.main.service.MemberVO">
	    SELECT * FROM (
	        SELECT ROWNUM AS RNUM, B.*
	        FROM (
	            SELECT 
	                M.MEM_ID,
	                M.MEM_EMAIL,
	                M.MEM_NICKNAME,
	                M.MEM_NAME,
	                M.MEM_ROLE,
	                M.CREATED_AT,
	                M.DEL_YN,
	                CASE 
	                    WHEN P.MEM_ID IS NOT NULL THEN 'SUSPENDED'
	                    WHEN L.LL_STATUS = 'I' THEN 'ONLINE'
	                    WHEN L.LL_STATUS = 'O' THEN 'OFFLINE'
	                    ELSE 'NEVER_LOGIN'
	                END AS ACTIVITY_STATUS,
	                L.LL_CREATED_AT AS LAST_ACTIVITY_TIME
	            FROM MEMBER M
	            LEFT JOIN (
	                SELECT 
	                    MEM_ID,
	                    LL_STATUS,
	                    LL_CREATED_AT,
	                    ROW_NUMBER() OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT DESC) AS rn
	                FROM LOGIN_LOG
	            ) L ON M.MEM_ID = L.MEM_ID AND L.rn = 1
	            LEFT JOIN (
	                SELECT DISTINCT MEM_ID
	                FROM MEMBER_PENALTY
	                WHERE MP_TYPE = 'G14002'
	                AND MP_COMPLETE_AT > SYSDATE
	            ) P ON M.MEM_ID = P.MEM_ID
	            <where>
	                M.DEL_YN = 'N'
	                AND M.MEM_ROLE = 'R01001'
	                <if test="keyword != null and keyword != ''">
	                    AND (UPPER(M.MEM_NAME) LIKE '%' || UPPER(#{keyword}) || '%' 
	                    OR UPPER(M.MEM_NICKNAME) LIKE '%' || UPPER(#{keyword}) || '%' 
	                    OR UPPER(M.MEM_EMAIL) LIKE '%' || UPPER(#{keyword}) || '%')
	                </if>
	                <if test="activityStatus != null and activityStatus != ''">
	                    <if test="activityStatus == 'SUSPENDED'">
	                        AND P.MEM_ID IS NOT NULL
	                    </if>
	                    <if test="activityStatus == 'ONLINE'">
	                        AND L.LL_STATUS = 'I'
	                        AND P.MEM_ID IS NULL
	                    </if>
	                    <if test="activityStatus == 'OFFLINE'">
	                        AND L.LL_STATUS = 'O'
	                        AND P.MEM_ID IS NULL
	                    </if>
	                    <if test="activityStatus == 'NEVER_LOGIN'">
	                        AND L.LL_STATUS IS NULL
	                        AND P.MEM_ID IS NULL
	                    </if>
	                </if>
	            </where>
	            <choose>
	                <when test="sortBy != null and sortBy != ''">
	                    ORDER BY 
	                    <choose>
	                        <when test="sortBy == 'id'">
	                            M.MEM_ID 
	                        </when>
	                        <when test="sortBy == 'name'">
	                            M.MEM_NAME 
	                        </when>
	                        <when test="sortBy == 'email'">
	                            M.MEM_EMAIL 
	                        </when>
	                        <when test="sortBy == 'status'">
	                            CASE 
	                                WHEN P.MEM_ID IS NOT NULL THEN 0
	                                WHEN L.LL_STATUS = 'I' THEN 1 
	                                WHEN L.LL_STATUS = 'O' THEN 2 
	                                ELSE 3 
	                            END
	                        </when>
	                        <otherwise>
	                            M.MEM_ID
	                        </otherwise>
	                    </choose>
	                    <if test="sortOrder == 'desc'">DESC</if>
	                    <if test="sortOrder == 'asc' or sortOrder == null">ASC</if>
	                </when>
	                <otherwise>
	                    ORDER BY 
	                        CASE 
	                            WHEN P.MEM_ID IS NOT NULL THEN 0
	                            WHEN L.LL_STATUS = 'I' THEN 1 
	                            WHEN L.LL_STATUS = 'O' THEN 2 
	                            ELSE 3 
	                        END,
	                        NVL(L.LL_CREATED_AT, TO_DATE('1900-01-01', 'YYYY-MM-DD')) DESC
	                </otherwise>
	            </choose>
	        ) B
	        WHERE ROWNUM <![CDATA[<=]]> #{endNo}
	    )
	    WHERE RNUM <![CDATA[>=]]> #{startNo}
	</select>
	
	<!-- 5. 활동 상태 회원 리스트 총 건수 -->
	<select id="getAllMemberActivityList" resultType="int">
	    SELECT COUNT(*)
	    FROM MEMBER M
	    LEFT JOIN (
	        SELECT 
	            MEM_ID,
	            LL_STATUS,
	            LL_CREATED_AT,
	            ROW_NUMBER() OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT DESC) AS rn
	        FROM LOGIN_LOG
	    ) L ON M.MEM_ID = L.MEM_ID AND L.rn = 1
	    LEFT JOIN (
	        SELECT DISTINCT MEM_ID
	        FROM MEMBER_PENALTY
	        WHERE MP_TYPE = 'G14002'
	        AND MP_COMPLETE_AT > SYSDATE
	    ) P ON M.MEM_ID = P.MEM_ID
	    <where>
	        M.DEL_YN = 'N'
	        AND M.MEM_ROLE = 'R01001'
	        <if test="keyword != null and keyword != ''">
	            AND (UPPER(M.MEM_NAME) LIKE '%' || UPPER(#{keyword}) || '%' 
	            OR UPPER(M.MEM_NICKNAME) LIKE '%' || UPPER(#{keyword}) || '%' 
	            OR UPPER(M.MEM_EMAIL) LIKE '%' || UPPER(#{keyword}) || '%')
	        </if>
	        <if test="activityStatus != null and activityStatus != ''">
	            <if test="activityStatus == 'SUSPENDED'">
	                AND P.MEM_ID IS NOT NULL
	            </if>
	            <if test="activityStatus == 'ONLINE'">
	                AND L.LL_STATUS = 'I'
	                AND P.MEM_ID IS NULL
	            </if>
	            <if test="activityStatus == 'OFFLINE'">
	                AND L.LL_STATUS = 'O'
	                AND P.MEM_ID IS NULL
	            </if>
	            <if test="activityStatus == 'NEVER_LOGIN'">
	                AND L.LL_STATUS IS NULL
	                AND P.MEM_ID IS NULL
	            </if>
	        </if>
	    </where>
	</select>
	
	<!-- 6. 어제 로그인한 고유 사용자 수 -->
	<select id="getYesterdayActiveUsers" resultType="int">
	    SELECT COUNT(DISTINCT MEM_ID)
	    FROM LOGIN_LOG
	    WHERE TRUNC(LL_CREATED_AT) = TRUNC(SYSDATE) - 1
	    AND LL_STATUS = 'I'
	</select>
	
	<!-- 7. 어제 평균 홈페이지 이용 시간 (분 단위) -->
	<select id="getYesterdayAverageUsageTime" resultType="double">
	    WITH SESSION_TIMES AS (
	        SELECT 
	            MEM_ID,
	            LL_CREATED_AT AS LOGIN_TIME,
	            LEAD(LL_CREATED_AT) OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT) AS LOGOUT_TIME,
	            LL_STATUS,
	            LEAD(LL_STATUS) OVER (PARTITION BY MEM_ID ORDER BY LL_CREATED_AT) AS NEXT_STATUS
	        FROM LOGIN_LOG
	        WHERE TRUNC(LL_CREATED_AT) = TRUNC(SYSDATE) - 1
	    )
	    SELECT NVL(AVG((LOGOUT_TIME - LOGIN_TIME) * 24 * 60), 0) AS avg_minutes
	    FROM SESSION_TIMES
	    WHERE LL_STATUS = 'I' 
	    AND NEXT_STATUS = 'O'
	    AND LOGOUT_TIME IS NOT NULL
	</select>
</mapper>