<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.chat.service.impl.ChatMapper">

	<!--### UI 구성을 고려하여 최신 메시지, 안읽은 수, 채팅방 현재참여 인원수 등의 확장성 고려 ###-->
	<!-- 현재 내가 참여한 채팅방 목록 (스터디그룹만) -->
	<select id="findRoomsByMemId" resultType="kr.or.ddit.chat.service.ChatRoomVO" parameterType="String" >
		SELECT
		       CR.CR_ID
		     , CC_ID
		     , TARGET_ID
		     , CR_TITLE
		     , CR_MAX_CNT
		     , CREATED_AT
		  FROM CHAT_ROOM CR
		 INNER JOIN CHAT_MEMBER CM
		          ON CR.CR_ID = CM.CR_ID
		 WHERE CM.MEM_ID = #{memId}
		   AND CR.CC_ID = 'G04001'
		   AND CM.IS_EXITED = 'N'
	</select>

	<!-- 채팅방 개설. ccId와 targetId를 전달 받아야함. 종류가 상담인 경우에는 crTitle과 crMaxCnt는 null, 2 로 각각 처리-->
	<insert id="insertChatRoom" parameterType="kr.or.ddit.chat.service.ChatRoomVO">
		<selectKey keyProperty="crId" order="BEFORE" resultType="int">
			SELECT NVL(MAX(CR_ID),0)+1
			  FROM CHAT_ROOM
		</selectKey>
		INSERT INTO CHAT_ROOM(
		    CR_ID, CC_ID, TARGET_ID
		    , CR_TITLE, CR_MAX_CNT, CREATED_AT
		)VALUES(
		   #{crId}, #{ccId}, #{targetId}, #{crTitle}, #{crMaxCnt}, SYSTIMESTAMP
		);
	</insert>

	<!-- 채팅방 입장 및 재입장 merge구문 -->
	<update id="insertAndUpdateChatMember" parameterType="kr.or.ddit.chat.service.ChatMemberVO">
		MERGE INTO CHAT_MEMBER CM
		USING DUAL
		ON (
		    CM.MEM_ID = #{memId}
		    AND CM.CR_ID = #{crId}
		    )
		WHEN MATCHED THEN
		    UPDATE
		    SET  CM.JOINED_AT = SYSTIMESTAMP
		        , EXITED_AT = NULL
		        , IS_EXITED = 'N'
		WHEN NOT MATCHED THEN
		    INSERT
		    VALUES(#{memId},#{crId},SYSTIMESTAMP, SYSTIMESTAMP, NULL, 'N')
	</update>

	<!-- 채팅방 퇴장 (종료 아니고 퇴장임) -->
	<update id="chatMemberExitChatRoomUpdate" parameterType="kr.or.ddit.chat.service.ChatMemberVO">
		UPDATE  CHAT_MEMBER
		   SET  EXITED_AT = SYSTIMESTAMP
		        , IS_EXITED = 'Y'
		 WHERE  MEM_ID = #{memId}
		   AND  CR_ID = #{crId}
	</update>

	<!-- 채팅방 입장 시 해당 채팅방 메시지 전체 불러오기 (상담에서 사용) -->
	<select id="selectAllChatMsgByChatRoomId" parameterType="kr.or.ddit.chat.service.ChatMessageVO">
		SELECT
		       MSG_ID, CR_ID, MEM_ID
		       , MESSAGE, SENT_AT, MESSAGE_TYPE
		       , FILE_GROUP_ID
		  FROM CHAT_MESSAGE
		 WHERE CR_ID = #{crId}
	</select>

	<!-- 채팅방 입장 시 해당 채팅방 메시지 입장유저의 입장일시 기준으로 불러오기 -->
	<select id="selectChatMsgByChatRoomIdAndMemId" parameterType="kr.or.ddit.chat.service.ChatMessageVO">
		SELECT
		       M.MSG_ID, M.CR_ID, M.MEM_ID
		       , M.MESSAGE, M.SENT_AT, M.MESSAGE_TYPE
		       , M.FILE_GROUP_ID
		  FROM CHAT_MESSAGE M
		 WHERE M.CR_ID = #{crId}
		   AND M.SENT_AT >= (SELECT JOINED_AT
		                       FROM CHAT_MEMBER
		                      WHERE CR_ID = #{crId}
		                        AND MEM_ID = #{memId})
	</select>

	<!-- 입장한 채팅방 읽음시각 현재시간으로 수정하기 -->
	<update id="lastReadTimeUpdate" parameterType="kr.or.ddit.chat.service.ChatMemberVO">
	    UPDATE CHAT_MEMBER
	       SET LAST_READ_TIME = SYSTIMESTAMP
	     WHERE CR_ID = #{crId}
	       AND MEM_ID = #{memId}
	       AND IS_EXITED = 'N'
	</update>

	<!-- 채팅 수신테이블 (안읽음 추적을 위함) 삽입 -->
	<insert id="insertChatReceiver" parameterType="kr.or.ddit.chat.service.ChatReceiverVO">
		INSERT INTO CHAT_RECEIVER(
			MSG_ID, RECEIVER_ID, READ_AT
		)VALUES(
			#{msgId}, #{receiverId}, SYSTIMESTAMP
		)
	</insert>

	<!-- 현재 입장한 채팅방 수신된 메시지 읽음 시각 전체 업데이트 -->
	<update id="receverReadAtUpdate" parameterType="kr.or.ddit.chat.service.ChatMemberVO">
		UPDATE CHAT_RECEIVER
		   SET READ_AT = SYSTIMESTAMP
		 WHERE RECEIVER_ID = #{memId}
		   AND MSG_ID IN (SELECT MSG_ID
		                    FROM CHAT_MESSAGE
		                   WHERE CR_ID = #{crId})
	</update>

	<!-- 채팅메시지 테이블에 삽입 -->
	<insert id="insertChatMessage" parameterType="kr.or.ddit.chat.service.ChatMessageVO">
		<selectKey keyProperty="msgId" order="BEFORE" resultType="int">
			SELECT NVL(MAX(MSG_ID),0)+1
			FROM CHAT_MESSAGE
		</selectKey>
		INSERT INTO CHAT_MESSAGE(
		    MSG_ID, CR_ID, MEM_ID, MESSAGE
		    , SENT_AT, MESSAGE_TYPE, FILE_GROUP_ID
		)VALUES(
		    #{msgId}, #{crId}, #{memId}, #{message}
		    , SYSTIMESTAMP, #{messageType}, #{fileGroupId}
		)
	</insert>

	<!-- 안읽은 메시지가 존재하는지 체크. 특정 멤버 전체 채팅방 안읽은 갯수 조회 -->
	<select id="selectUnreadMsgCount" resultType="int" parameterType="kr.or.ddit.chat.service.ChatMemberVO">
		SELECT COUNT(*)
		  FROM CHAT_RECEIVER
		 WHERE RECEIVER_ID = #{memId}
		   AND READ_AT IS NULL
	</select>

</mapper>