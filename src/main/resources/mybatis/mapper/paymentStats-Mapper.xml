<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.admin.las.service.impl.PaymentStatsMapper">
	
	<!-- 
	// 당일 기준 총 구독자 수
	public int selectTotalSubscriberCount();
	 -->
	<select id="selectTotalSubscriberCount">
        SELECT
	        COUNT(DISTINCT MEM_ID)
	    FROM
	        MEMBER_SUBSCRIPTION
	    WHERE
	        TRUNC(SUB_END_DT) >= TRUNC(SYSDATE)
    </select>
 
 	<!-- 
 	// 당일 새로운 구독자 수
	public int selectNewSubscriberCountToday();
	 -->
	<select id="selectNewSubscriberCountToday">
        SELECT
        	COUNT(*)
	    FROM PAYMENT P
	    JOIN MEMBER_SUBSCRIPTION MS ON P.MS_ID = MS.MS_ID
	    WHERE 
	        TRUNC(P.PAY_DATE) = TRUNC(SYSDATE)
	        AND P.PAY_DATE = (
	            SELECT MIN(P2.PAY_DATE)
	            FROM PAYMENT P2
	            JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
	            WHERE MS2.MEM_ID = MS.MEM_ID
	        )
    </select>
	 
	<!-- 
	 // 구독 결제 매출 
	public List<Map<String, Object>> selectRevenueStats(Map<String, Object> params);
	 --> 
	<select id="selectRevenueStats" parameterType="map" resultType="map">
        SELECT
            <choose>
                <when test="period == 'monthly'">TO_CHAR(p.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(p.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose> AS "dt",
            SUM(p.PAY_AMOUNT) AS "revenue"
        FROM PAYMENT p
        JOIN MEMBER_SUBSCRIPTION ms ON p.MS_ID = ms.MS_ID
        JOIN MEMBER m ON ms.MEM_ID = m.MEM_ID
        WHERE p.PAY_AMOUNT > 0
          <if test="from != null and from != ''">AND p.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
          <if test="to != null and to != ''">AND p.PAY_DATE	<![CDATA[ < ]]>TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
          <if test="gender != null and gender != '' and gender != 'ALL'">AND m.MEM_GEN = #{gender}</if>
        GROUP BY 
            <choose>
                <when test="period == 'monthly'">TO_CHAR(p.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(p.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose>
        ORDER BY "dt" ASC
	   
    </select>
	
	<!-- 
	// 구독자 수 
	public List<Map<String, Object>> selectSubscriberCountStats(Map<String, Object> params);
	 -->
	<select id="selectSubscriberCountStats" parameterType="map" resultType="map">
        SELECT
            <choose>
                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose> AS "dt",
            COUNT(*) AS "count"
        FROM MEMBER_SUBSCRIPTION MS
        JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
        JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
        WHERE 1=1
            <if test="from != null and from != ''">AND P.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
            <if test="to != null and to != ''">AND P.PAY_DATE <![CDATA[ < ]]> TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
            <if test="gender != null and gender != '' and gender != 'ALL'">AND M.MEM_GEN = #{gender}</if>
        GROUP BY 
            <choose>
                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose>
        ORDER BY "dt" ASC
    </select>
	
	 <!-- 
	 // 상품별 인기 통계 (수정됨: 나이 조건 추가)
	public List<Map<String, Object>> selectProductPopularityStats(Map<String, Object> params);
	  -->
	<select id="selectProductPopularityStats" parameterType="map" resultType="map">
        SELECT
            <choose>
                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose> AS "dt",
            S.SUB_NAME AS "subName",
            COUNT(*) AS "count"
        FROM MEMBER_SUBSCRIPTION MS
        JOIN PAYMENT P ON P.MS_ID = MS.MS_ID
        JOIN SUBSCRIBE S ON S.SUB_ID = MS.SUB_ID
        JOIN MEMBER M ON M.MEM_ID = MS.MEM_ID
        WHERE 1=1
            <if test="from != null and from != ''">AND P.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
            <if test="to != null and to != ''">AND P.PAY_DATE <![CDATA[ < ]]> TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
            <if test="gender != null and gender != '' and gender != 'ALL'">AND M.MEM_GEN = #{gender}</if>
            <if test="ageBand != null and ageBand != '' and ageBand != 'ALL'">
              AND M.MEM_BIRTH IS NOT NULL
              AND CASE
                    WHEN FLOOR(MONTHS_BETWEEN(TRUNC(P.PAY_DATE), M.MEM_BIRTH)/12) BETWEEN 10 AND 19 THEN '청소년'
                    ELSE '청년'
                  END = #{ageBand}
            </if>
        GROUP BY 
            <choose>
                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
            </choose>,
            S.SUB_NAME
        ORDER BY "dt", "subName"
    </select>
	
	<!-- 
	// AI 기능 이용 내역 (수정됨: 나이 구분 변경)
	public List<Map<String, Object>> selectAiServiceUsageStats(Map<String, Object> params);
	 -->
	<select id="selectAiServiceUsageStats" parameterType="map" resultType="map">
	    SELECT
	        <choose>
	            <when test="period == 'monthly'">TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM')</when>
	            <otherwise>TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM-DD')</otherwise>
	        </choose> AS "dt",
	        
	        -- '이력서AI요청' 로그 카운트
	        COUNT(CASE WHEN l.PL_TITLE = '이력서AI요청' THEN 1 END) AS "resumeCnt",
	        
	        -- '자기소개서AI요청' 로그 카운트
	        COUNT(CASE WHEN l.PL_TITLE = '자기소개서AI요청' THEN 1 END) AS "coverCnt",
	        
	        -- '모의면접AI요청' 로그 카운트
	        COUNT(CASE WHEN l.PL_TITLE = '모의면접AI요청' THEN 1 END) AS "mockCnt"
	        
	    FROM PAGE_LOG l
	    JOIN MEMBER m ON l.MEM_ID = m.MEM_ID
	    WHERE 
	        l.PL_TITLE IN ('이력서AI요청', '자기소개서AI요청', '모의면접AI요청')
	        
	        <if test="from != null and from != ''">AND l.PL_CREATED_AT >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
	        <if test="to != null and to != ''">AND l.PL_CREATED_AT <![CDATA[ < ]]> TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
	        <if test="gender != null and gender != '' and gender != 'ALL'">AND m.MEM_GEN = #{gender}</if>
	        <if test="ageBand != null and ageBand != '' and ageBand != 'ALL'">
	          AND m.MEM_BIRTH IS NOT NULL
	          AND CASE
	                WHEN FLOOR(MONTHS_BETWEEN(TRUNC(l.PL_CREATED_AT), m.MEM_BIRTH)/12) BETWEEN 10 AND 19 THEN '청소년'
	                ELSE '청년'
	              END = #{ageBand}
	        </if>
	        
	    GROUP BY 
	        <choose>
	            <when test="period == 'monthly'">TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM')</when>
	            <otherwise>TO_CHAR(l.PL_CREATED_AT, 'YYYY-MM-DD')</otherwise>
	        </choose>
	    ORDER BY "dt" ASC
	</select>

	<!-- 
	// 일일 구독 결제 매출 - 대시보드용
	public List<Map<String, Object>> selectDailyRevenueForDashboard();
	 -->	
	<select id="selectDailyRevenueForDashboard" resultType="map">
		<![CDATA[
	    WITH DATES AS (
	      SELECT TRUNC(SYSDATE) - LEVEL + 1 AS "dt"
	      FROM DUAL
	      CONNECT BY LEVEL <= 7
	    ),
	    REVENUE AS (
	        SELECT
	            TRUNC(PAY_DATE) AS "dt",
	            SUM(PAY_AMOUNT) AS "revenue"
	        FROM PAYMENT
	        WHERE PAY_DATE >= TRUNC(SYSDATE) - 6
	          AND PAY_AMOUNT > 0
	        GROUP BY TRUNC(PAY_DATE)
	    )
	    SELECT
	        TO_CHAR(D."dt", 'YYYY-MM-DD') AS "dt",
	        NVL(R."revenue", 0) AS "revenue"
	    FROM DATES D
	    LEFT JOIN REVENUE R ON D."dt" = R."dt"
	    ORDER BY D."dt" ASC
	    ]]>
	</select>
	
	<!-- 
	// 회원 가입 수 대비하여 구독 비율 - 대시보드용
	public List<Map<String, Object>> selectNewUserRevenueRate();
	 -->	
	<select id="selectNewUserRevenueRate" parameterType="map" resultType="map">
		<![CDATA[
	    WITH NEW_MEMBERS AS (
	        SELECT
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(CREATED_AT, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(CREATED_AT, 'YYYY-MM-DD')</otherwise>
	            </choose> AS "dt",
	            COUNT(*) AS "newMemberCount"
	        FROM MEMBER
	        WHERE 1=1
	            <if test="from != null and from != ''">AND CREATED_AT >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
	            <if test="to != null and to != ''">AND CREATED_AT < TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
	        GROUP BY 
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(CREATED_AT, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(CREATED_AT, 'YYYY-MM-DD')</otherwise>
	            </choose>
	    ),
	    NEW_SUBS AS (
	        SELECT
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose> AS "dt",
	            COUNT(*) AS "newSubscriberCount"
	        FROM PAYMENT P
	        JOIN MEMBER_SUBSCRIPTION MS ON P.MS_ID = MS.MS_ID
	        WHERE 
	            P.PAY_DATE = (
	                SELECT MIN(P2.PAY_DATE)
	                FROM PAYMENT P2
	                JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
	                WHERE MS2.MEM_ID = MS.MEM_ID
	            )
	            <if test="from != null and from != ''">AND P.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
	            <if test="to != null and to != ''">AND P.PAY_DATE < TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
	        GROUP BY
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose>
	    )
	    SELECT
	        d."dt",
	        d."newMemberCount",
	        NVL(s."newSubscriberCount", 0) AS "newSubscriberCount",
	        CASE
	            WHEN d."newMemberCount" > 0 THEN ROUND(NVL(s."newSubscriberCount", 0) / d."newMemberCount")
	            ELSE 0
	        END AS "conversionRate" -- 신규 가입자 대비 신규 구독
	    FROM NEW_MEMBERS d
	    LEFT JOIN NEW_SUBS s ON d."dt" = s."dt"
	    ORDER BY d."dt" ASC
	    ]]>
	</select>
	
	
	
	<!-- 
	// 총 구독 결제 대비하여 신규 구독 결제 비율 - 대시보드용
	public List<Map<String, Object>> selectNewRevenueRateStats();
	 -->	
	<select id="selectNewRevenueRateStats" parameterType="map" resultType="map">
		<![CDATA[
	    WITH TOTAL_REVENUE AS (
	        SELECT
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose> AS "dt",
	            SUM(P.PAY_AMOUNT) AS "totalRevenue"
	        FROM PAYMENT P
	        WHERE 1=1
	            <if test="from != null and from != ''">AND P.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
	            <if test="to != null and to != ''">AND P.PAY_DATE < TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
	        GROUP BY 
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose>
	    ),
	    NEW_SUB_REVENUE AS (
	        SELECT
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose> AS "dt",
	            SUM(P.PAY_AMOUNT) AS "newSubscriberRevenue"
	        FROM PAYMENT P
	        JOIN MEMBER_SUBSCRIPTION MS ON P.MS_ID = MS.MS_ID
	        WHERE 
	            P.PAY_DATE = (
	                SELECT MIN(P2.PAY_DATE)
	                FROM PAYMENT P2
	                JOIN MEMBER_SUBSCRIPTION MS2 ON P2.MS_ID = MS2.MS_ID
	                WHERE MS2.MEM_ID = MS.MEM_ID
	            )
	            <if test="from != null and from != ''">AND P.PAY_DATE >= TO_DATE(#{from}, 'YYYY-MM-DD')</if>
	            <if test="to != null and to != ''">AND P.PAY_DATE < TO_DATE(#{to}, 'YYYY-MM-DD') + 1</if>
	        GROUP BY
	            <choose>
	                <when test="period == 'monthly'">TO_CHAR(P.PAY_DATE, 'YYYY-MM')</when>
	                <otherwise>TO_CHAR(P.PAY_DATE, 'YYYY-MM-DD')</otherwise>
	            </choose>
	    )
	    SELECT
	        d."dt",
	        NVL(d."totalRevenue", 0) AS "totalRevenue",
	        NVL(s."newSubscriberRevenue", 0) AS "newSubscriberRevenue",
	        CASE
	            WHEN d."totalRevenue" > 0 THEN ROUND((NVL(s."newSubscriberRevenue", 0) / d."totalRevenue") * 100, 2)
	            ELSE 0
	        END AS "newRevenueRate" -- 신규 매출 비율 (%)
	    FROM TOTAL_REVENUE d
	    LEFT JOIN NEW_SUB_REVENUE s ON d."dt" = s."dt"
	    ORDER BY d."dt" ASC
	    ]]>
	</select>
	
	<!-- 
	대시보드 상단 숫자 통계 (평균매출 vs 예상매출)
	public Map<String, Object> getRevenueSummaryForDashboard();
	 -->
	<select id="getRevenueSummaryForDashboard" resultType="map">
		<![CDATA[
	    SELECT
	        -- 1. 이전달까지의 월평균 매출
	        -- (올해 1월~지난달 총매출 / 지난달까지의 개월 수)
	        (
	            SELECT
	                CASE
	                    -- 현재가 1월이 아닐 때만 계산
	                    WHEN EXTRACT(MONTH FROM SYSDATE) > 1 THEN 
	                        ROUND(SUM(PAY_AMOUNT) / (EXTRACT(MONTH FROM SYSDATE) - 1))
	                    ELSE 0
	                END
	            FROM PAYMENT
	            WHERE PAY_DATE >= TRUNC(SYSDATE, 'YY') -- 올해 1월 1일
	              AND PAY_DATE < TRUNC(SYSDATE, 'MM')   -- 이번 달 1일 전까지
	        ) AS "avgPreviousRevenue",
	        
	        -- 2. 이번달 예상 매출
	        -- (현재까지 매출 / 현재까지 일수) * 이번달 총 일수
	        (
	            SELECT
	                CASE
	                    WHEN EXTRACT(DAY FROM SYSDATE) > 0 THEN 
	                        ROUND((NVL(SUM(PAY_AMOUNT), 0) / EXTRACT(DAY FROM SYSDATE)) * EXTRACT(DAY FROM LAST_DAY(SYSDATE)))
	                    ELSE 0
	                END
	            FROM PAYMENT
	            WHERE PAY_DATE >= TRUNC(SYSDATE, 'MM')
	        ) AS "estimatedCurrentRevenue"
	    FROM DUAL
	    ]]>
	</select>
	
	
	
	<!-- 
	// 대시보드 하단 그래프 통계 (전체사용자 vs 구독자)
	public List<Map<String, Object>> getMonthlyUserStatsForDashboard();
	 -->
	<select id="getMonthlyUserStatsForDashboard"  resultType="map">
		<![CDATA[
	   WITH MONTH_LIST AS (
		  -- 올해 1월 말일부터 현재 월 말일까지의 월말 목록
		  SELECT LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE, 'YY'), LEVEL - 1)) AS month_end
		  FROM DUAL
		  CONNECT BY LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE, 'YY'), LEVEL - 1)) <= LAST_DAY(SYSDATE)
		)
		SELECT
		  TO_CHAR(m.month_end, 'MM') AS "month",
		
		  -- 해당 월말 시점까지의 누적 총 가입자 수(탈퇴자 제외)
		  (SELECT COUNT(*)
		     FROM MEMBER
		    WHERE CREATED_AT <= m.month_end
		      AND MEM_ID NOT IN (
		            SELECT MEM_ID
		              FROM MEM_DEL
		             WHERE MD_DELETED_AT <= m.month_end
		      )
		  ) AS "totalUsers",
		
		  -- 해당 월의 구독자 수 = 전달에 결제한 사람 수 (기준: 월말)
		  (SELECT COUNT(*)
		     FROM PAYMENT
		    WHERE PAY_DATE >= ADD_MONTHS(TRUNC(m.month_end, 'MM'), -1)  -- 전달 월초 포함
		      AND PAY_DATE <  TRUNC(m.month_end, 'MM')                  -- 당월 월초 미만
		  ) AS "subscribers"
		
		FROM MONTH_LIST m
		ORDER BY "month"
	    ]]>
	</select>
</mapper>